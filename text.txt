
1. Для разного количества чисел наилучшие варианты сортировок будут различными.
	Предварительно предлагаю разделить на три варианта, зависящих от количества чисел.
		1-> Малые до 50 чисел
		2-> Средние 50-250
		3-> Большие 250-500
2.  2 экзешника checker и push_swap.

3. Makefile - рекомпиляция, только если это необходимо + личная хотелка
	(все *.c файлы в одной папке, все *.o файлы в другой).
4. Познакомиться с valgrind (самостоятельная проверка на утечки).



Начало программы:
1. 1 стек - Неповторяющиеся положительные и отрицательные числа или 2 стек - ничего.
2. Цель: отсортировать по возврастанию.
3. Операции - которые можно использовать:
	-> 1.  sa : swap a - swap the first 2 elements at the top of stack a. Do nothing if there is only one or no elements).			
	-> 2.  sb : swap b - swap the first 2 elements at the top of stack b. Do nothing if there is only one or no elements).
	-> 3.  ss : sa and sb at the same time.
	-> 4.  pa : push a - take the first element at the top of b and put it at the top of a. Do nothing if b is empty.
	-> 5.  pb : push b - take the first element at the top of a and put it at the top of b. Do nothing if a is empty.
	-> 6.  ra : rotate a - shift up all elements of stack a by 1. The first element becomes the last one.
	-> 7.  rb : rotate b - shift up all elements of stack b by 1. The first element becomes the last one.
	-> 8.  rr : ra and rb at the same time.
	-> 9.  rra : reverse rotate a - shift down all elements of stack a by 1. The last element becomes the first one.
	-> 10. rrb : reverse rotate b - shift down all elements of stack b by 1. The last element becomes the first one.
	-> 11. rrr : rra and rrb at the same time.

4. Программа получает лист интов (первый аргумент - вверху стека стека).

5. Если какие-то ошибки - то display Error followed by a ’\n’.


		The “checker” program
1. will get as an argument the stack a formatted as a list of integers.
2. Затем Checker будет ждать и читать инструкции на стандартном входе,
	за каждой инструкцией будет следовать ’\n’. Как только все инструкции будут прочитаны,
	checker выполнит их в стеке, полученном в качестве аргумента.
3. Если после выполнения этих инструкций стек a фактически отсортирован, А b пуст, то checker
	должен отображать "OK", а затем "\n " на стандартном выходе. В любом другом случае checker должен отображать "KO",
	а затем "\n " на стандартном выходе.
4. В случае ошибки вы должны отобразить ошибку, за которой следует "\n " в стандартной ошибке. Ошибки включают, например: некоторые аргументы не являются целыми числами, некоторые аргументы больше целого числа, есть дубликаты, инструкция не существует и/или неправильно отформатирована.